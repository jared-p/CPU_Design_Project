0000_0110_0_0000_0000_0000_00010_001_000 // imediate move, moves 17 into r0
0000_0111_0_0001_0000_0000_00000_xxx_000 // move r0 into r1 (17 to r1)
0000_1001_0_0010_0001_0001_00000_xxx_000 // ldr r2 with contents of address 17
0000_0000_1_0011_0000_0001_00000_xxx_000 // add r0 to r1 and put contents in r3 (should be 17+17=34)
0000_0001_0_1100_0000_0010_00000_xxx_000 // sub r2 from r0 and put content in r12 (should be 17-2=15)
0000_0110_0_0100_0000_0000_00010_010_000 // imediate move, moves 18 into r4
0000_1001_0_0101_0100_0100_00000_xxx_000 // ldr r5 with contents of address 18
0000_0010_1_0110_0010_0010_00000_xxx_000 // MUL 2*2 = 4 puts content into R6
0000_0011_0_0111_0010_0101_00010_xxx_010 // R2 OR R5<<2 puts content into R7
0000_0100_0_1000_0010_0101_00100_xxx_011 // R2 AND R5 Right Rotate 4 = 0 puts content into R8
0000_0101_0_1001_0000_0101_00001_xxx_001 // R0 XOR R5>>1 puts content into R9
0010_1000_1_1010_0000_0101_00000_xxx_000 // CMP R0 > R5 = 0 puts content into R10
0000_0110_0_1000_0000_0000_00010_010_000 // imediate move, moves 18 into R8
0000_1010_0_0110_1000_0010_00000_xxx_000 // STR store contents of R2 in memory adrress held in R8 (puts 2 into 18)
0000_1001_0_0000_1000_1000_00000_xxx_000 // ldr r0 with contents of address 18 (puts 2 into r0)
0000_0000_0_0000_0000_0000_00000_000_000
0000_0000_0_0000_0000_0000_00000_000_000
0000_0000_0_0000_0000_0000_00000_000_010 // ram index 17
0000_1111_0_0000_0000_0000_00000_000_000 // ram index 18
0000_0000_1_0000_0000_0000_00000_000_000
0000_0000_0_0000_1111_1111_00000_000_000
0000_0000_0_0000_0000_0000_11111_111_111
